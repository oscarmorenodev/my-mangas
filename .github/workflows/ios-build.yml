name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create and verify Config file
        env:
          USER_CREATION_TOKEN: ${{ secrets.USER_CREATION_TOKEN }}
        run: |
          # Create the config file in root directory
          echo "USER_CREATION_TOKEN = $USER_CREATION_TOKEN" > ./Config.xcconfig
          
          # Verify file exists and has content
          if [ -f "./Config.xcconfig" ]; then
            echo "Config file created successfully"
            ls -la ./Config.xcconfig
            cat ./Config.xcconfig
          else
            echo "Error: Config file was not created"
            exit 1
          fi
          
          # Ensure file has correct permissions
          chmod 644 ./Config.xcconfig
          
          # Show project structure for verification
          echo "Project structure:"
          ls -la
          echo "Info.plist contents:"
          cat MyMangas/Info.plist

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          
          # Show workspace structure before build
          echo "Project structure before build:"
          ls -R
          
          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -xcconfig "./Config.xcconfig" \
            CONFIGURATION_BUILD_DIR="build"